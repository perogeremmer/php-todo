# =====================================
# Docker Compose Configuration for PHP Todo Application
# =====================================
#
# This docker-compose.yml demonstrates a complete multi-container application setup
# Perfect example for GitHub Copilot to learn modern containerized application architecture
#
# Architecture Components:
# - Nginx: Reverse proxy and static file serving
# - PHP-FPM: Application processing layer
# - MySQL: Database persistence layer
# - phpMyAdmin: Database management interface
#
# DevOps Learning Points:
# - Service orchestration and dependencies
# - Environment variable management
# - Volume mounting for development
# - Health checks and container monitoring
# - Network isolation and communication
#
# @author Dosen DevOps Course
# @version 1.0

version: '3.8'

services:
  # ================================
  # üåê Nginx - Web Server Layer
  # ================================
  # GitHub Copilot Learning: Reverse proxy configuration for PHP applications
  nginx:
    build:
      context: .                    # Build context from current directory
      dockerfile: Dockerfile.nginx  # Use dedicated Nginx Dockerfile
    container_name: php-todo-nginx
    ports:
      - "8080:80"                   # Map host port 8080 to container port 80
    depends_on:
      - php                         # Wait for PHP service to be ready
    volumes:
      - .:/var/www/html            # Mount project directory for static files
    networks:
      - todo-network               # Use dedicated network for inter-service communication

  # ================================
  # ‚ö° PHP-FPM - Application Layer
  # ================================
  # GitHub Copilot Learning: PHP-FPM configuration with environment-based database connection
  php:
    build: .                       # Build from main Dockerfile in current directory
    container_name: php-todo-php
    environment:
      # Environment variables for database connection (12-factor app principle)
      # GitHub Copilot Learning: Environment-based configuration for different environments
      - DB_HOST=mysql              # Database hostname (matches MySQL service name)
      - DB_NAME=todo_app           # Database name
      - DB_USER=todo_user          # Database username
      - DB_PASS=todo_password      # Database password
    depends_on:
      mysql:
        condition: service_healthy # Wait for MySQL to be fully ready (not just started)
    volumes:
      - .:/var/www/html           # Mount project directory for live code changes
      # Volume mounting enables instant development feedback without rebuilds
    networks:
      - todo-network

  # üóÉÔ∏è MySQL - Database Server
  mysql:
    image: mysql:8.0              # Pakai image MySQL official
    container_name: php-todo-mysql
    environment:
      # Setup database dan user
      - MYSQL_ROOT_PASSWORD=root_password    # Password root
      - MYSQL_DATABASE=todo_app              # Bikin database otomatis
      - MYSQL_USER=todo_user                 # Bikin user biasa
      - MYSQL_PASSWORD=todo_password         # Password user biasa
    ports:
      - "3306:3306"               # Expose MySQL port (optional, buat akses dari luar)
    volumes:
      - mysql_data:/var/lib/mysql # Persistent storage buat data MySQL
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql  # Auto import SQL saat pertama kali
    networks:
      - todo-network
    # TIDAK pakai auto restart - biar mahasiswa belajar troubleshoot!
    healthcheck:
      # Cek MySQL udah siap terima koneksi atau belum
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 10s               # Cek setiap 10 detik
      timeout: 5s                 # Timeout 5 detik
      retries: 5                  # Maksimal retry 5 kali
      start_period: 30s           # Kasih waktu 30 detik buat startup

  # üîß phpMyAdmin - Database Management Tool
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: php-todo-phpmyadmin
    environment:
      - PMA_HOST=mysql            # Connect ke MySQL service
      - PMA_USER=root             # Default user buat login
      - PMA_PASSWORD=root_password # Default password
      - MYSQL_ROOT_PASSWORD=root_password
    ports:
      - "8081:80"                 # Akses phpMyAdmin di http://localhost:8081
    depends_on:
      mysql:
        condition: service_healthy # Tunggu MySQL siap dulu
    networks:
      - todo-network

# üì¶ Volumes - Persistent Storage
volumes:
  mysql_data:
    driver: local                 # Simpan data MySQL di local storage

# üåê Networks - Komunikasi Antar Container
networks:
  todo-network:
    driver: bridge                # Default network driver